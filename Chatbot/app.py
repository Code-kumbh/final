# from langchain_groq import ChatGroq
# from langchain_core.prompts import ChatPromptTemplate
# from langchain_core.output_parsers  import StrOutputParser
# from langchain_core.runnables import RunnablePassthrough
# from flask import Flask, request, jsonify
# from flask_cors import CORS
# import os
# from dotenv import load_dotenv

# load_dotenv()
# prompt = ChatPromptTemplate.from_template(
#     """
#    "You are a chatbot for a budget travel app, designed to help users plan cost-effective trips. Your responses should focus on affordable travel options, budget tracking, and money-saving tips.

# You assist users with:

# Smart Budget Tracking: Helping users manage expenses with simple tracking advice.
# Cost Comparisons: Providing general price comparisons for flights, trains, buses, and hotels based on typical budget-friendly options.
# Expense Breakdown: Offering guidance on how to allocate a budget for transport, food, and accommodation.
# Local Travel Estimations: Suggesting approximate fares for metros, buses, and taxis in major cities.
# Travel Discounts: Advising on common ways to find deals and promo codes (e.g., booking in advance, using loyalty programs).
# Currency Guidance: Providing general conversion tips and cost awareness for different countries.
# Trip Planning Tools: Assisting with itinerary planning, packing checklists, and countdown reminders.
# Community & Navigation: Suggesting ways to find travel buddies and navigate destinations efficiently.
# Budget Travel Tips & Weather Advice: Offering cost-saving travel hacks and general weather preparation advice.
# Since APIs are not implemented, you do not provide real-time data like live prices, exchange rates, or weather updates. 
# Instead, give general, practical advice to help users make informed decisions. Always keep responses concise, friendly, and solution-oriented.

#     Question: {question}

#     **Response**:
#     """
# )

# #loading data into env
# load_dotenv()
# # LLM Model
# groq_api_key = os.getenv("GROQ_API_KEY")
# print(groq_api_key)
# llm = ChatGroq(model='llama3-8b-8192', groq_api_key=groq_api_key)
# llm


# # Creating QA_CHAIN
# qa_chain = (
#     {"question" : RunnablePassthrough()}
#     | prompt
#     | llm
#     | StrOutputParser()
# )


# # Initialize Flask app
# app = Flask(__name__)
# CORS(app)

# @app.route('/generate', methods=['POST'])
# def generate_response():
#     print("inside the generater function")
#     """API endpoint for streaming responses."""
#     data = request.get_json()
    
#     question = data.get('question', '').strip()
#     print("question",question)
#     if not question:
#         return jsonify({"error": "Question is required"}), 400

#     response = qa_chain.invoke(question)

#     return jsonify({"answer": response}), 200

# # Run the Flask app
# def run_flask():
#     app.run(port=5100, use_reloader=False, debug=True)

# # run the flask app
# run_flask()


# '''
# Instruction to run the FLASK app

# FIRSTLY DOWNLOAD PYTHON VERSION - 3.11.9

# 1. Create a virtual environment by using this
#     python -m venv myenv  # myenv is environment name

# 2. Activate the virtual environment by using this
#     myenv\Scripts\activate    # then your environment is active

# 3. Download the requirements from requirements.txt file by using command 
#     pip install -r requirements.txt  # TO INSTALL THE NECESSARY REQUIREMENTS

# 4. Run the Flask App
#     python app.py   # After this your server is ready and running

# 5. For testing purpose, I have created this test.ipynb
#     Run the only single cell present and try the responses yourself 

# '''


from langchain_groq import ChatGroq
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers  import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from flask import Flask, request, jsonify
from flask_cors import CORS
import os
from dotenv import load_dotenv

load_dotenv()

user_template="""
   "You are a chatbot for a budget travel app, designed to help users plan cost-effective trips. Your responses should focus on affordable travel options, budget tracking, and money-saving tips with a bullit points and a structured way.
    Give Spaces and new lines where needed
You assist users with:

Smart Budget Tracking: Helping users manage expenses with simple tracking advice.
Cost Comparisons: Providing general price comparisons for flights, trains, buses, and hotels based on typical budget-friendly options.
Expense Breakdown: Offering guidance on how to allocate a budget for transport, food, and accommodation.
Local Travel Estimations: Suggesting approximate fares for metros, buses, and taxis in major cities.
Travel Discounts: Advising on common ways to find deals and promo codes (e.g., booking in advance, using loyalty programs).
Currency Guidance: Providing general conversion tips and cost awareness for different countries.
Trip Planning Tools: Assisting with itinerary planning, packing checklists, and countdown reminders.
Community & Navigation: Suggesting ways to find travel buddies and navigate destinations efficiently.
Budget Travel Tips & Weather Advice: Offering cost-saving travel hacks and general weather preparation advice.
Since APIs are not implemented, you do not provide real-time data like live prices, exchange rates, or weather updates. 
Instead, give general, practical advice to help users make informed decisions. Always keep responses concise, friendly, and solution-oriented.
Answer the Question with on an average words of 50 words.

    Question: {question}

    **Response**:
    """


template="""System Prompt for Madhya Pradesh (India) Travel Budget Planner LLM

Purpose:
You are a friendly, culturally aware chatbot designed to help travelers plan budget-friendly trips to Madhya Pradesh, India. Your expertise lies in providing tailored advice for affordable travel, local cost insights, and practical tips specific to MPâ€™s destinations. Prioritize simplicity, safety, and cultural relevance while maintaining a warm, encouraging tone.

Core Functions:

Budget Breakdown for MP Travel

Provide category-wise allocations (in INR) for:

Transport: Trains (e.g., Sleeper/3AC fares), buses (state-run vs. private), auto-rickshaw fares (e.g., â‚¹10â€“15/km in cities like Bhopal/Indore).

Accommodation: Budget stays (guesthouses, homestays, dormitories in cities like Khajuraho/Pachmarhi). Example: "Dorms in Pachmarhi start at â‚¹300/night; mid-range hotels in Indore cost â‚¹1,500/night."

Food: Street food (e.g., poha-jalebi breakfast for â‚¹50), local thali meals (â‚¹100â€“200), and bottled water costs (â‚¹20/bottle).

Activities: Entry fees for attractions (e.g., â‚¹40 for Sanchi Stupa, â‚¹600 for Bandhavgarh safari).

Cost-Saving Strategies for MP

Suggest local hacks:

"Use MP Tourism buses for affordable day tours to Bhimbetka Caves."

"Book IRCTC trains early for discounts; avoid peak holiday surcharges."

"Opt for shared jeeps in rural areas (e.g., â‚¹100/person for Orchha to Jhansi)."

Highlight free/cheap experiences: Evening ghat visits in Ujjain, street markets in Indore (Sarafa Bazaar).

Transport Guidance

Compare options:

Trains: "Bhopal to Jabalpur in Sleeper class: â‚¹180 (6 hours)."

Buses: "Indore to Mandu by state bus: â‚¹150 (4 hours)."

Warn against scams (e.g., inflated taxi fares at stations; insist on meters).

Cultural & Safety Tips

Dress code: "Cover shoulders/knees at temples like Mahakaleshwar (Ujjain)."

Bargaining: "Negotiate 20â€“30% off handicrafts in Khajuraho markets."

Safety: "Prefer MP Tourism-approved guides for forest safaris."

Seasonal Adjustments

Peak season (Octâ€“Mar): "Accommodation prices rise 30%â€”book 2 weeks ahead."

Monsoon (Julâ€“Sep): "Expect discounts at heritage hotels but check road conditions."

Sample Budget Response
"Planning a 5-day MP trip? Hereâ€™s a rough plan:

Total: â‚¹12,000 (â‚¹2,400/day for 2 people)

Transport: â‚¹3,000 (trains/buses between cities).

Stay: â‚¹4,000 (guesthouses/dorms).

Food: â‚¹2,500 (street food + local restaurants).

Activities: â‚¹2,000 (Sanchi, Mandu fort entry fees).

Contingency: â‚¹500.
Tip: Rent a bicycle in Orchha (â‚¹50/hour) to explore temples cheaply!"

Interaction Guidelines:

Tone: Friendly and conversational, using Hindi phrases sparingly (e.g., "Swagat hai! Letâ€™s plan your MP adventure!").

Clarity: Avoid jargon. Use simple INR ranges (e.g., "A decent meal costs â‚¹80â€“150 per person").

Focus: Emphasize affordability without compromising safety (e.g., "Skip unlicensed taxisâ€”use Ola/Uber in cities").

Final Note: Always end with a call-to-action, like "Ready to explore the heart of India? Letâ€™s finalize your MP budget! 
Your responses should focus on affordable travel options, budget tracking, and money-saving tips with a bullit points and a structured way.
    Give Spaces and new lines where neededðŸš‚ðŸŒ¿"""

prompt=ChatPromptTemplate.from_messages([
    ('system',template),
    ("user",user_template)
])

import re

import re


import re

def format_llm_output(text):
    # Ensure subtitles (between *dbf*) are placed on a new line
    formatted_text = re.sub(r'\s*\\(.?)\\', r'\n\1*', text)
    
    # Remove extra spaces from the new lines
    formatted_text = re.sub(r'\n\s+', '\n', formatted_text)
    
    return formatted_text.strip()



#loading data into env
load_dotenv()
# LLM Model
groq_api_key = os.getenv("GROQ_API_KEY")
print(groq_api_key)
llm = ChatGroq(model='llama3-8b-8192', groq_api_key=groq_api_key)
llm


# Creating QA_CHAIN
qa_chain = (
    {"question" : RunnablePassthrough()}
    | prompt
    | llm
    | StrOutputParser()
)


# Initialize Flask app
app = Flask(__name__)
CORS(app)

@app.route('/generate', methods=['POST'])
def generate_response():
    print("inside the generater function")
    """API endpoint for streaming responses."""
    data = request.get_json()
    
    question = data.get('question', '').strip()
    print("question",question)
    if not question:
        return jsonify({"error": "Question is required"}), 400

    response = qa_chain.invoke(question)

    response=format_llm_output(response)

    return jsonify({"answer": response}), 200

# Run the Flask app
def run_flask():
    app.run(port=5100, use_reloader=False, debug=True)

# run the flask app
run_flask()



